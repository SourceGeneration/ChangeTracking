namespace System.Text;

internal class CSharpCodeBuilder
{
    private const char IndentChar = ' ';
    private const int IndentLength = 4;
    private readonly StringBuilder _builder;
    private int _indent = 0;

    public CSharpCodeBuilder()
    {
        _builder = new(4096);
    }

    public CSharpCodeBuilder(StringBuilder builder, int indent)
    {
        _builder = builder;
        _indent = indent;
    }

    public void AppendLine() => _builder.AppendLine();

    public void IncreaseIndent()
    {
        _indent += IndentLength;
    }

    public void DecreaseIndent()
    {
        if (_indent >= IndentLength)
            _indent -= IndentLength;
    }

    public void Append(string value) => _builder.Append(value);

    public void Append(char value) => _builder.Append(value);

    public void AppendAutoGeneratedComment() => AppendLine("// <auto-generated />");

    public void AppendLine(string value)
    {
        if (_indent > 0)
            _builder.Append(IndentChar, _indent);
        _builder.AppendLine(value);
    }

    public void AppendIndent()
    {
        _builder.Append(IndentChar, _indent);
    }

    public void AppendIndentLine(string value)
    {
        _builder.Append(IndentChar, _indent + IndentLength);
        _builder.AppendLine(value);
    }

    public void AppendBlock(string value, Action block, string? end = null)
    {
        AppendLine(value);
        AppendBlock(block, end);
    }

    public void AppendBlock(Action block, string? end = null)
    {
        AppendLine("{");
        if (block != null)
        {
            _indent += IndentLength;
            block.Invoke();
            _indent -= IndentLength;
        }
        AppendLine($"}}{end}");
    }

    public void AppendAssignment(string property, object? value, bool statement = false)
    {
        string valueStr;
        if (value == null) valueStr = "null";
        else if (value is bool b) valueStr = b ? "true" : "false";
        else if (value is string s) valueStr = @$"""{s}""";
        else valueStr = value.ToString();

        char end = statement ? ';' : ',';
        AppendLine($"{property} = {valueStr}{end}");
    }

    public override string ToString() => _builder.ToString();
}
